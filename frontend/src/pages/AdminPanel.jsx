import { useState, useEffect, useCallback } from 'react';
import api from '../services/api';
import ProductForm from '../components/ProductForm';
import CategoryForm from '../components/CategoryForm';
import OrderForm from '../components/OrderForm';
import UserForm from '../components/UserForm';

function AdminPanel() {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [orders, setOrders] = useState([]);
  const [users, setUsers] = useState([]);
  const [userSearch, setUserSearch] = useState('');
  const [orderStatusFilter, setOrderStatusFilter] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');
  const [showInactive, setShowInactive] = useState(false);
  const [productPage, setProductPage] = useState(1);
  const [categoryPage, setCategoryPage] = useState(1);
  const [userPage, setUserPage] = useState(1);
  const [orderPage, setOrderPage] = useState(1);
  const [productPagination, setProductPagination] = useState({ total: 0, pages: 1 });
  const [categoryPagination, setCategoryPagination] = useState({ total: 0, pages: 1 });
  const [userPagination, setUserPagination] = useState({ total: 0, pages: 1 });
  const [orderPagination, setOrderPagination] = useState({ total: 0, pages: 1 });
  const [productSort, setProductSort] = useState('price');
  const [productOrder, setProductOrder] = useState('ASC');
  const [orderSort, setOrderSort] = useState('created_at');
  const [orderOrder, setOrderOrder] = useState('DESC');
  const [editProductId, setEditProductId] = useState(null);
  const [editCategoryId, setEditCategoryId] = useState(null);
  const [editOrderId, setEditOrderId] = useState(null);
  const [editUserId, setEditUserId] = useState(null);
  const limit = 10;

  const fetchData = useCallback(async () => {
    try {
      const [prodRes, catRes, ordRes, userRes] = await Promise.all([
        api.get(
          `/products?page=${productPage}&limit=${limit}&sort=${productSort}&order=${productOrder}&category_id=${categoryFilter}&is_active=${
            showInactive ? '' : 'true'
          }`
        ),
        api.get(`/categories?page=${categoryPage}&limit=${limit}`),
        api.get(`/orders?status=${orderStatusFilter}&page=${orderPage}&limit=${limit}&sort=${orderSort}&order=${orderOrder}`),
        api.get(`/users?email=${userSearch}&page=${userPage}&limit=${limit}`),
      ]);
      setProducts(prodRes.data.products || prodRes.data);
      setProductPagination({ total: prodRes.data.total, pages: prodRes.data.pages });
      setCategories(catRes.data.categories || catRes.data);
      setCategoryPagination({ total: catRes.data.total, pages: catRes.data.pages });
      setOrders(ordRes.data.orders || ordRes.data);
      setOrderPagination({ total: ordRes.data.total, pages: ordRes.data.pages });
      setUsers(userRes.data.users || userRes.data);
      setUserPagination({ total: userRes.data.total, pages: userRes.data.pages });
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + (error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
    }
  }, [
    productPage,
    categoryPage,
    orderPage,
    userPage,
    productSort,
    productOrder,
    orderSort,
    orderOrder,
    orderStatusFilter,
    userSearch,
    categoryFilter,
    showInactive,
  ]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleDelete = async (endpoint, id) => {
    try {
      await api.delete(`${endpoint}/${id}`);
      fetchData();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
    }
  };

  const handleEdit = (type, id) => {
    switch (type) {
      case 'product':
        setEditProductId(id === editProductId ? null : id);
        break;
      case 'category':
        setEditCategoryId(id === editCategoryId ? null : id);
        break;
      case 'order':
        setEditOrderId(id === editOrderId ? null : id);
        break;
      case 'user':
        setEditUserId(id === editUserId ? null : id);
        break;
      default:
        break;
    }
  };

  const handleSave = () => {
    setEditProductId(null);
    setEditCategoryId(null);
    setEditOrderId(null);
    setEditUserId(null);
    fetchData();
  };

  const renderItem = (type, item, editId, FormComponent, formProps) => {
    const isEditing = item.id === editId;
    return (
      <li key={item.id} style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
        {isEditing ? (
          <FormComponent {...formProps} onSave={handleSave} />
        ) : (
          <>
            {type === 'product' && (
              <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                <img
                  src={`${process.env.REACT_APP_API_URL}${item.ProductImages?.[0]?.url || '/placeholder.jpg'}`}
                  alt="preview"
                  style={{ width: '80px', height: '80px', objectFit: 'cover' }}
                />
                <div>
                  <strong>{item.name}</strong> ‚Äì {item.price}‚ÇΩ{' '}
                  [{item.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}]
                  <br />
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.Category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
                  <br />
                  –†–∞–∑–º–µ—Ä—ã: {item.available_sizes.join(', ') || '–ù–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤'}
                </div>
              </div>
            )}
            {type === 'category' && `${item.name}`}
            {type === 'order' && `–ó–∞–∫–∞–∑ #${item.id} - –°—Ç–∞—Ç—É—Å: ${item.status} - –°—É–º–º–∞: ${item.total_price} ‚ÇΩ`}
            {type === 'user' && `${item.email} - ${item.role}`}
            <button onClick={() => handleEdit(type, item.id)}>
              {isEditing ? '–û—Ç–º–µ–Ω–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
            <button onClick={() => handleDelete(`/${type}s`, item.id)}>–£–¥–∞–ª–∏—Ç—å</button>
          </>
        )}
      </li>
    );
  };

  return (
    <div>
      <h1>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>

      <h2>–ü—Ä–æ–¥—É–∫—Ç—ã</h2>
      <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>
        <div>
          <label>–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</label>
          <select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map((cat) => (
              <option key={cat.id} value={cat.id}>
                {cat.name}
              </option>
            ))}
          </select>
        </div>
        <div>
          <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
          <select value={productSort} onChange={(e) => setProductSort(e.target.value)}>
            <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
            <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
            <option value="created_at">–ü–æ –¥–∞—Ç–µ</option>
          </select>
          <select value={productOrder} onChange={(e) => setProductOrder(e.target.value)}>
            <option value="ASC">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
            <option value="DESC">–ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
          </select>
        </div>
        <div>
          <label>
            <input
              type="checkbox"
              checked={showInactive}
              onChange={(e) => setShowInactive(e.target.checked)}
            />
            –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
          </label>
        </div>
      </div>
      <ProductForm onSave={handleSave} />
      {products.length === 0 ? (
        <p>–ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0 }}>
            {products.map((product) =>
              renderItem('product', product, editProductId, ProductForm, { productId: product.id })
            )}
          </ul>
          <div>
            <button disabled={productPage === 1} onClick={() => setProductPage(productPage - 1)}>
              –ù–∞–∑–∞–¥
            </button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {productPage} –∏–∑ {productPagination.pages}</span>
            <button
              disabled={productPage === productPagination.pages}
              onClick={() => setProductPage(productPage + 1)}
            >
              –í–ø–µ—Ä–µ–¥
            </button>
          </div>
        </>
      )}

      <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
      <CategoryForm onSave={handleSave} />
      {categories.length === 0 ? (
        <p>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
      ) : (
        <>
          <ul>
            {categories.map((category) =>
              renderItem('category', category, editCategoryId, CategoryForm, { categoryId: category.id })
            )}
          </ul>
          <div>
            <button disabled={categoryPage === 1} onClick={() => setCategoryPage(categoryPage - 1)}>
              –ù–∞–∑–∞–¥
            </button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {categoryPage} –∏–∑ {categoryPagination.pages}</span>
            <button
              disabled={categoryPage === categoryPagination.pages}
              onClick={() => setCategoryPage(categoryPage + 1)}
            >
              –í–ø–µ—Ä–µ–¥
            </button>
          </div>
        </>
      )}

      <h2>–ó–∞–∫–∞–∑—ã</h2>
      <div>
        <label>–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
        <select value={orderStatusFilter} onChange={(e) => setOrderStatusFilter(e.target.value)}>
          <option value="">–í—Å–µ</option>
          <option value="pending">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
          <option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
          <option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
          <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
        </select>
        <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
        <select value={orderSort} onChange={(e) => setOrderSort(e.target.value)}>
          <option value="created_at">–ü–æ –¥–∞—Ç–µ</option>
          <option value="total_price">–ü–æ —Å—É–º–º–µ</option>
        </select>
        <select value={orderOrder} onChange={(e) => setOrderOrder(e.target.value)}>
          <option value="ASC">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
          <option value="DESC">–ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
        </select>
      </div>
      <OrderForm onSave={handleSave} />
      {orders.length === 0 ? (
        <p>–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
      ) : (
        <>
          <ul>
            {orders.map((order) =>
              renderItem('order', order, editOrderId, OrderForm, { orderId: order.id })
            )}
          </ul>
          <div>
            <button disabled={orderPage === 1} onClick={() => setOrderPage(orderPage - 1)}>
              –ù–∞–∑–∞–¥
            </button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {orderPage} –∏–∑ {orderPagination.pages}</span>
            <button disabled={orderPage === orderPagination.pages} onClick={() => setOrderPage(orderPage + 1)}>
              –í–ø–µ—Ä–µ–¥
            </button>
          </div>
        </>
      )}

      <h2>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
      <div>
        <label>–ü–æ–∏—Å–∫ –ø–æ email:</label>
        <input
          type="text"
          value={userSearch || ''}
          onChange={(e) => setUserSearch(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ email"
        />
      </div>
      <UserForm onSave={handleSave} />
      {users.length === 0 ? (
        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
      ) : (
        <>
          <ul>
            {users.map((user) =>
              renderItem('user', user, editUserId, UserForm, { userId: user.id })
            )}
          </ul>
          <div>
            <button disabled={userPage === 1} onClick={() => setUserPage(userPage - 1)}>
              –ù–∞–∑–∞–¥
            </button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {userPage} –∏–∑ {userPagination.pages}</span>
            <button disabled={userPage === userPagination.pages} onClick={() => setUserPage(userPage + 1)}>
              –í–ø–µ—Ä–µ–¥
            </button>
          </div>
        </>
      )}
    </div>
  );
}

export default AdminPanel;