import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';
import api from '../services/api';
import ProductForm from '../components/ProductForm';
import CategoryForm from '../components/CategoryForm';
import OrderForm from '../components/OrderForm';
import UserForm from '../components/UserForm';

function AdminPanel() {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [orders, setOrders] = useState([]);
  const [users, setUsers] = useState([]);
  const [userSearch, setUserSearch] = useState('');
  const [orderStatusFilter, setOrderStatusFilter] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');
  const [showInactive, setShowInactive] = useState(false);
  const [productPage, setProductPage] = useState(1);
  const [categoryPage, setCategoryPage] = useState(1);
  const [userPage, setUserPage] = useState(1);
  const [orderPage, setOrderPage] = useState(1);
  const [productPagination, setProductPagination] = useState({ total: 0, pages: 1 });
  const [categoryPagination, setCategoryPagination] = useState({ total: 0, pages: 1 });
  const [userPagination, setUserPagination] = useState({ total: 0, pages: 1 });
  const [orderPagination, setOrderPagination] = useState({ total: 0, pages: 1 });
  const [productSort, setProductSort] = useState('price');
  const [productOrder, setProductOrder] = useState('ASC');
  const [orderSort, setOrderSort] = useState('created_at');
  const [orderOrder, setOrderOrder] = useState('DESC');
  const [editProductId, setEditProductId] = useState(null);
  const [editCategoryId, setEditCategoryId] = useState(null);
  const [editOrderId, setEditOrderId] = useState(null);
  const [editUserId, setEditUserId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [activeSection, setActiveSection] = useState('products');
  const limit = 10;

  const fetchData = useCallback(async () => {
    setIsLoading(true);
    try {
      const [prodRes, catRes, ordRes, userRes] = await Promise.all([
        api.get(
          `/products?page=${productPage}&limit=${limit}&sort=${productSort}&order=${productOrder}&category_id=${categoryFilter}&is_active=${
            showInactive ? '' : 'true'
          }`
        ),
        api.get(`/categories?page=${categoryPage}&limit=${limit}`),
        api.get(`/orders?status=${orderStatusFilter}&page=${orderPage}&limit=${limit}&sort=${orderSort}&order=${orderOrder}`),
        api.get(`/users?email=${userSearch}&page=${userPage}&limit=${limit}`),
      ]);

      const prodData = prodRes.data.products || prodRes.data;
      setProducts(Array.isArray(prodData) ? prodData : []);
      const newProductPagination = { total: prodRes.data.total || 0, pages: prodRes.data.pages || 1 };
      setProductPagination(newProductPagination);
      if (productPage > newProductPagination.pages && newProductPagination.pages > 0) {
        setProductPage(newProductPagination.pages);
      }

      const catData = catRes.data.categories || catRes.data;
      setCategories(Array.isArray(catData) ? catData : []);
      const newCategoryPagination = { total: catRes.data.total || 0, pages: catRes.data.pages || 1 };
      setCategoryPagination(newCategoryPagination);
      if (categoryPage > newCategoryPagination.pages && newCategoryPagination.pages > 0) {
        setCategoryPage(newCategoryPagination.pages);
      }

      const ordData = ordRes.data.orders || ordRes.data;
      setOrders(Array.isArray(ordData) ? ordData : []);
      const newOrderPagination = { total: ordRes.data.total || 0, pages: ordRes.data.pages || 1 };
      setOrderPagination(newOrderPagination);
      if (orderPage > newOrderPagination.pages && newOrderPagination.pages > 0) {
        setOrderPage(newOrderPagination.pages);
      }

      const userData = userRes.data.users || userRes.data;
      setUsers(Array.isArray(userData) ? userData : []);
      const newUserPagination = { total: userRes.data.total || 0, pages: userRes.data.pages || 1 };
      setUserPagination(newUserPagination);
      if (userPage > newUserPagination.pages && newUserPagination.pages > 0) {
        setUserPage(newUserPagination.pages);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', {
        message: error.response?.data?.message || error.message,
        status: error.response?.status,
      });
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + (error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
    } finally {
      setIsLoading(false);
    }
  }, [
    productPage,
    categoryPage,
    orderPage,
    userPage,
    productSort,
    productOrder,
    orderSort,
    orderOrder,
    orderStatusFilter,
    userSearch,
    categoryFilter,
    showInactive,
  ]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const handleDelete = async (endpoint, id) => {
    try {
      await api.delete(`${endpoint}/${id}`);
      toast.success('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
      fetchData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', {
        message: error.response?.data?.message || error.message,
        status: error.response?.status,
      });
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
    }
  };

  const handleEdit = (type, id) => {
    switch (type) {
      case 'product':
        setEditProductId(id === editProductId ? null : id);
        break;
      case 'category':
        setEditCategoryId(id === editCategoryId ? null : id);
        break;
      case 'order':
        setEditOrderId(id === editOrderId ? null : id);
        break;
      case 'user':
        setEditUserId(id === editUserId ? null : id);
        break;
      default:
        break;
    }
  };

  const handleSave = () => {
    setEditProductId(null);
    setEditCategoryId(null);
    setEditOrderId(null);
    setEditUserId(null);
    toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    fetchData();
  };

  const renderItem = (type, item, editId, FormComponent, formProps) => {
    const isEditing = item.id === editId;
    return (
      <li key={item.id} className="admin-item">
        {isEditing ? (
          <FormComponent {...formProps} onSave={handleSave} />
        ) : (
          <>
            {type === 'product' && (
              <div className="admin-item-content">
                <img
                  src={`${process.env.REACT_APP_API_URL}${item.ProductImages?.[0]?.url || '/placeholder.jpg'}`}
                  alt="preview"
                  className="admin-item-image"
                />
                <div>
                  <strong>{item.name}</strong> ‚Äì {item.price}‚ÇΩ{' '}
                  [{item.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}]
                  <br />
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.Category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
                  <br />
                  –†–∞–∑–º–µ—Ä—ã: {item.available_sizes.join(', ') || '–ù–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤'}
                </div>
              </div>
            )}
            {type === 'category' && `${item.name}`}
            {type === 'order' && `–ó–∞–∫–∞–∑ #${item.id} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${item.User?.email || '–ù–µ —É–∫–∞–∑–∞–Ω'} - –°—Ç–∞—Ç—É—Å: ${item.status} - –°—É–º–º–∞: ${item.total_price} ‚ÇΩ`}
            {type === 'user' && `${item.email} - ${item.role}`}
            <div className="admin-item-actions">
              <button onClick={() => handleEdit(type, item.id)}>
                {isEditing ? '–û—Ç–º–µ–Ω–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
              <button onClick={() => handleDelete(`/${type}s`, item.id)}>–£–¥–∞–ª–∏—Ç—å</button>
            </div>
          </>
        )}
      </li>
    );
  };

  const renderPagination = (currentPage, setPage, pagination, isLoading) => {
    if (pagination.pages <= 1) return null;
    return (
      <div className="pagination">
        <button disabled={currentPage === 1 || isLoading} onClick={() => setPage(currentPage - 1)}>
          –ù–∞–∑–∞–¥
        </button>
        <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {pagination.pages}</span>
        <button
          disabled={currentPage === pagination.pages || isLoading}
          onClick={() => setPage(currentPage + 1)}
        >
          –í–ø–µ—Ä–µ–¥
        </button>
      </div>
    );
  };

  return (
    <div className="admin-panel">
      <div className="admin-container">
        <div className="sidebar">
          <div
            className={`sidebar-item ${activeSection === 'products' ? 'active' : ''}`}
            onClick={() => setActiveSection('products')}
          >
            –ü—Ä–æ–¥—É–∫—Ç—ã
          </div>
          <div
            className={`sidebar-item ${activeSection === 'categories' ? 'active' : ''}`}
            onClick={() => setActiveSection('categories')}
          >
            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
          </div>
          <div
            className={`sidebar-item ${activeSection === 'orders' ? 'active' : ''}`}
            onClick={() => setActiveSection('orders')}
          >
            –ó–∞–∫–∞–∑—ã
          </div>
          <div
            className={`sidebar-item ${activeSection === 'users' ? 'active' : ''}`}
            onClick={() => setActiveSection('users')}
          >
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
          </div>
        </div>
        <div className="admin-content">
          <h1>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
          {isLoading && <p className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}

          {activeSection === 'products' && (
            <>
              <h2>–ü—Ä–æ–¥—É–∫—Ç—ã</h2>
              <div className="admin-filters">
                <div>
                  <label>–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</label>
                  <select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                    <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                    {categories.map((cat) => (
                      <option key={cat.id} value={cat.id}>
                        {cat.name}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                  <select value={productSort} onChange={(e) => setProductSort(e.target.value)}>
                    <option value="price">–ü–æ —Ü–µ–Ω–µ</option>
                    <option value="name">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                    <option value="created_at">–ü–æ –¥–∞—Ç–µ</option>
                  </select>
                  <select value={productOrder} onChange={(e) => setProductOrder(e.target.value)}>
                    <option value="ASC">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                    <option value="DESC">–ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                  </select>
                </div>
                <div>
                  <label>
                    <input
                      type="checkbox"
                      checked={showInactive}
                      onChange={(e) => setShowInactive(e.target.checked)}
                    />
                    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                  </label>
                </div>
              </div>
              <ProductForm onSave={handleSave} />
              {products.length === 0 ? (
                <p>–ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
              ) : (
                <ul className="admin-list">
                  {products.map((product) =>
                    renderItem('product', product, editProductId, ProductForm, { productId: product.id })
                  )}
                </ul>
              )}
              {renderPagination(productPage, setProductPage, productPagination, isLoading)}
            </>
          )}

          {activeSection === 'categories' && (
            <>
              <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
              <CategoryForm onSave={handleSave} />
              {categories.length === 0 ? (
                <p>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
              ) : (
                <ul className="admin-list">
                  {categories.map((category) =>
                    renderItem('category', category, editCategoryId, CategoryForm, { categoryId: category.id })
                  )}
                </ul>
              )}
              {renderPagination(categoryPage, setCategoryPage, categoryPagination, isLoading)}
            </>
          )}

          {activeSection === 'orders' && (
            <>
              <h2>–ó–∞–∫–∞–∑—ã</h2>
              <div className="admin-filters">
                <div>
                  <label>–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
                  <select value={orderStatusFilter} onChange={(e) => setOrderStatusFilter(e.target.value)}>
                    <option value="">–í—Å–µ</option>
                    <option value="pending">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                    <option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
                    <option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                    <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
                  </select>
                </div>
                <div>
                  <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                  <select value={orderSort} onChange={(e) => setOrderSort(e.target.value)}>
                    <option value="created_at">–ü–æ –¥–∞—Ç–µ</option>
                    <option value="total_price">–ü–æ —Å—É–º–º–µ</option>
                  </select>
                  <select value={orderOrder} onChange={(e) => setOrderOrder(e.target.value)}>
                    <option value="ASC">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                    <option value="DESC">–ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                  </select>
                </div>
              </div>
              {orders.length === 0 ? (
                <p>–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
              ) : (
                <ul className="admin-list">
                  {orders.map((order) =>
                    renderItem('order', order, editOrderId, OrderForm, { orderId: order.id })
                  )}
                </ul>
              )}
              {renderPagination(orderPage, setOrderPage, orderPagination, isLoading)}
            </>
          )}

          {activeSection === 'users' && (
            <>
              <h2>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
              <div className="admin-filters">
                <div>
                  <label>–ü–æ–∏—Å–∫ –ø–æ email:</label>
                  <input
                    type="text"
                    value={userSearch || ''}
                    onChange={(e) => setUserSearch(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                  />
                </div>
              </div>
              <UserForm onSave={handleSave} />
              {users.length === 0 ? (
                <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
              ) : (
                <ul className="admin-list">
                  {users.map((user) =>
                    renderItem('user', user, editUserId, UserForm, { userId: user.id })
                  )}
                </ul>
              )}
              {renderPagination(userPage, setUserPage, userPagination, isLoading)}
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default AdminPanel;